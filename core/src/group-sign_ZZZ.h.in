#pragma once

#ifdef __cplusplus
extern "C" {
#endif

// workaround to allow using the library from C++
#ifdef __cplusplus
#define C99
#endif

#include "pair_ZZZ.h"

#ifdef __cplusplus
#undef C99
#endif

// TODO: replacing macros by functions would improve tool support
typedef FP_YYY   FP;
#define FP_rcopy FP_YYY_rcopy
#define FP_rcopy FP_YYY_rcopy
typedef FP2_YYY  FP2;
typedef FP12_YYY FP12;
#define FP12_equals FP12_YYY_equals
#define FP12_one FP12_YYY_one
#define FP12_mul FP12_YYY_mul

#define Modulus     Modulus_ZZZ
#define MODBYTES    MODBYTES_XXX
#define CURVE_Cof   CURVE_Cof_ZZZ
#define CURVE_Gx    CURVE_Gx_ZZZ
#define CURVE_Gy    CURVE_Gy_ZZZ
#define CURVE_Pxa   CURVE_Pxa_ZZZ
#define CURVE_Pxb   CURVE_Pxb_ZZZ
#define CURVE_Pya   CURVE_Pya_ZZZ
#define CURVE_Pyb   CURVE_Pyb_ZZZ
#define CURVE_Order CURVE_Order_ZZZ

typedef ECP_ZZZ ECP;
#define ECP_get    ECP_ZZZ_get
#define ECP_set    ECP_ZZZ_set
#define ECP_setx   ECP_ZZZ_setx
#define ECP_add    ECP_ZZZ_add
#define ECP_mul    ECP_ZZZ_mul
#define ECP_affine ECP_ZZZ_affine
#define ECP_copy   ECP_ZZZ_copy
#define ECP_isinf  ECP_ZZZ_isinf
#define ECP_output ECP_ZZZ_output
#define ECP_mapit  ECP_ZZZ_mapit

typedef ECP2_ZZZ ECP2;
#define ECP2_get       ECP2_ZZZ_get
#define ECP2_set       ECP2_ZZZ_set
#define ECP2_add       ECP2_ZZZ_add
#define ECP2_affine    ECP2_ZZZ_affine
#define ECP2_copy      ECP2_ZZZ_copy
#define ECP2_equals    ECP2_ZZZ_equals
#define ECP2_fromOctet ECP2_ZZZ_fromOctet
#define ECP2_toOctet   ECP2_ZZZ_toOctet
#define ECP2_output    ECP2_ZZZ_output

typedef BIG_XXX BIG;
#define BIG_get          BIG_XXX_get
#define BIG_add          BIG_XXX_add
#define BIG_comp         BIG_XXX_comp
#define BIG_mod          BIG_XXX_mod
#define BIG_modneg       BIG_XXX_modneg
#define BIG_fromBytes    BIG_XXX_fromBytes
#define BIG_toBytes      BIG_XXX_toBytes
#define BIG_fromBytesLen BIG_XXX_fromBytesLen
#define BIG_copy         BIG_XXX_copy
#define BIG_rcopy        BIG_XXX_rcopy
#define BIG_randomnum    BIG_XXX_randomnum
#define BIG_norm         BIG_XXX_norm
#define BIG_modmul       BIG_XXX_modmul
#define BIG_output       BIG_XXX_output

#define PAIR_G1mul       PAIR_ZZZ_G1mul
#define PAIR_G2mul       PAIR_ZZZ_G2mul
#define PAIR_fexp        PAIR_ZZZ_fexp
#define PAIR_ate         PAIR_ZZZ_ate
#define PAIR_triple_ate  PAIR_ZZZ_triple_ate

extern void* GS_createState();

extern void GS_destroyState(void* state);

extern int GS_seed(void* state, char* seed, int seed_length);

extern int GS_setupGroup(void* state);

extern int GS_loadGroupPrivKey(void* state, char* data, int len);

extern int GS_loadGroupPubKey(void* state, char* data, int len);

extern int GS_startJoin(void* state, char* challenge, int challenge_len, char* joinmsg, int* len);

extern int GS_finishJoin(void* state, char* joinresponse, int len);

// These are variants of startJoin and finishJoin that do not modify internal state
// (except from RNG)
extern int GS_startJoinStatic(
  void* state,
  char* challenge, // in
  int challenge_len, // in
  char* gsk, int* len_gsk, // out
  char* joinmsg, int* len // out
);

extern int GS_finishJoinStatic(
  char* publickey, int len_publickey, // in
  char* gsk, int len_gsk, // in
  char* joinresponse, int len, // in
  char* credentials, int* len_credentials // out
);

// Assuming it has already been verified in finishJoin
// TODO: what if the group public key changes? should we include group public key in
// UserPrivateKey? Now we don't require group public key to be set...
extern int GS_loadUserPrivKey(void* state, char* in, int in_len);
// End - Operations that modify internal state

extern int GS_exportGroupPrivKey(void* state, char* out, int* out_len);

extern int GS_exportGroupPubKey(void* state, char* out, int* out_len);

extern int GS_exportUserPrivKey(void* state, char* out, int* out_len);

extern int GS_processJoin(void* state, char* joinmsg, int joinmsg_len, char* challenge, int challenge_len, char* out, int* out_len);

extern int GS_sign(void* state, char* msg, int msg_len, char* bsn, int bsn_len, char* signature, int* len);

extern int GS_verify(void* state, char* msg, int msg_len, char* bsn, int bsn_len, char* signature, int len);

extern int GS_getSignatureTag(char* signature, int sig_len, char* tag, int* tag_len);

extern int GS_getStateSize();

#ifdef __cplusplus
} // end extern "C"
#endif
